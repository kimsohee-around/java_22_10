

List<String> list = new ArrayList<>();


위의 명령문을 이해해 봅시다.

1.List : 인터페이스
2.ArrayList : List의 구현클래스(구현체)

3.ArrayList 의 implements 는 무엇인가요?
	List<E>, RandomAccess, Cloneable, java.io.Serializable
	4가지 인터페이스의 추상메소드를 구현하고 있습니다.

4. 위와 같이 선언됬을때 사용할 수 있는 메소드는 
무엇인가요?
1) List<String> list = new ArrayList<>();
2) ArrayList<String> list = new ArrayList<>();

1)과 2)의 차이점은? 
1)은 List 인터페이스 메소드만 사용할수 있고
2)는 모든 인터페이스의 메소드를 사용할 수 있다.

결론 : 여러개의 인터페이스를 구현한 구현클래스의 경우
`객체를 생성하고 참조하는 변수의 선언된 타입`에 따라 사용되는 메소드가 달라진다.
인터페이스 타입으로 선언하면 해당 인터페이스의 메소드만
구현클래스 타입으로 선언하면 모든 인터페이스 메소드를 사용할 수 있습니다.
많은 자바API 클래스들이 인터페이스를 다중 구현하고 있습니다.


5. 클래스의 분석 
`java doc 11` 검색 후 오라클 사이트에서 확인합니다. 
- 클래스의 상속 또는 구현 관계를 알수 있습니다.

super class : 부모클래스
sub class : 자식클래스

super interface : 부모 인터페이스
sub interface : 자식 인터페이스

implement class : 구현 클래스가 어떤것이 있는지

Implemented Interfaces: 어떤 인터페이스를 구현했는지 

6. InterfaceA.java 파일 참고
//오늘의 주제 : 인터페이스 (참고 : 클래스의 상속, 추상클래스의 추상메소드가 관련성 있는 내용입니다.)	
/*   자바인터페이스의 특징
 *   1. 객체를 직접 생성하지 않습니다. new 연산 X
 *   2. 필드는 상수만 있습니다.		public static final 생략합니다.인스턴스 필드 없습니다.
 *   3. 추상메소드를 갖고 있습니다.    public abstract  생략합니다. 
 *   4. static 메소드와 인스턴스메소드(반드시 키워드 default 사용) 도 사용할 수 있습니다. 접근한정자 public입니다.
 *   
 *   자바 객체지향프로그래밍 특징 : 다형성. 인터페이스는 다형성 구현을 위한 대표적인 방법입니다.
 *   					인터페이스는 다중 구현(implement). 일반 상속은 단일 상속(extends).
 *   자바 라이브러리의 많은 클래스들이 인터페이스를 통해 구현되어 있습니다. 자바클래스들을 사용하기 위해 인터페이스의 특징을 이해합니다.
     인터페이스는 기능 즉 메소드를 중심으로 참조 타입을 설정합니다.같은 기능을 구현한 클래스이면 같은 인터페이스 타입으로 참조합니다.
     인터페이스들끼리의 상속도 가능합니다. (InterfaceAB, MyClassAB 소스 참고하세요.)
 */


